Мой вариант - 7.

На стороне клиента:
✔ Есть header (с названием варианта и кнопкой для открытия), main, footer (прижат к низу; есть ФИО и номер группы)
✔ При нажатии на кнопку форма отображается в основной части страницы по середине и появляется плавно.
✔ Форма соответствует варианту задания.
✔ В форме есть кнопки для отправки данных и для отмены. Кнопка отмены плавно скрывает форму, кнопка отправки данных - отправляет их в формате json и закрывает модальное окно. К запросу добавить заголовок Content-Type: application/json;
- Данные из тела ответа с сервера с кодом 200 выводятся в виде таблицы.
- Если возникла ошибка или получен ответ с кодом из 400 или 500 группы, то сообщение о проблеме отображается на странице.
✔ Страница следует принципам отзывчивости.
✔ Для стилизации страницы используется Bootstrap пятой версии.
✔ Форма должна быть выполнена корректно. Правильные теги, типы полей, связанные ярлыки (label).
✔ Реализована валидация данных на стороне клиента (в index.html есть проверки на валидность + ключевые слова required).
- HTML код должен быть валиден (не иметь ошибок в валидаторе).


На стороне сервера:
✔ npm init - демонстрация этого - картинка "proof1.png";
✔ express используется, но на гит не залит. Его надо будет установить, когда скачаете проект;
✔ В package.json содержится script, с именем start.
✔ Сервер запущен на порту 5500 (в app.js);
✔ Все запросы к серверу логируются: в консоль выводится метод запроса, url и код ответа. Выводится "/" (именно они обрабатываются), GET/POST, и сам объект json.
✔ Страница с формой и стили для нее находятся в папке для статического контента на стороне сервера - в папке public (она через express.static указана в app.js).
✔ При получении get-запроса на базовый URL (http://localhost/) в качестве ответа отправляется документ с формой.
✔ Для обработки post-запроса с данными из формы есть отдельная конечная точка (endpoint) (app.post).
✔ На стороне сервера проверить наличие заголовка Content-Type и что он содержит application/json, в противном случае отправить ответ {status: "error", message: "Неверный тип данных"} с кодом 400.
- На стороне сервера проводится валидация данных из самой формы: соответствие типу данных (число, строка, булевое) и наличие обязательных полей.
- Если данные не соответствуют нужному типу, то отправляется ответ {status: "error", message: "Неверные данные в форме"} с кодом 400.
- Если отсутствуют обязательные поля, то отправляется ответ {status: "error", message: "Не хватает данных"} с кодом 400.
- Если все в порядке, то отправляется ответ {status: "ok", data: {объект, который был в теле запроса}} с кодом 200.

Репозиторий:
✔ .gitignore с некоторыми каталогами, которые будут игнорироваться.